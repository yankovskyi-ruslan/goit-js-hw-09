{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAgCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAvCQQ,SAASC,cAAc,SAC/BC,iBAAiB,UAE9B,SAA8BC,GAC5BA,EAAEC,iBACF,MAAMC,OAAEA,EAAQb,MAAAc,EAAKC,KAAEA,GAASJ,EAAEK,OAAOC,SACnCC,EAAeP,EAAEK,OAAOG,iBAC9B,IAAIC,EAAYC,OAAOP,EAAMQ,OAE2EJ,EAA3FK,UAAW,EACxB,IAAK,IAAIC,EAAI,EAAGA,GAAKX,EAAOS,MAAOE,GAAK,EACtC1B,EAAc0B,EAAGJ,GACdK,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA8B,OAAOC,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAEhE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA8B,OAAOG,QAAQ,sBAAoB9B,QAAiBC,MAAU,IAElEoB,GAAaC,OAAON,EAAKO,OAO3Bf,YAAW,KACTW,EAAaK,UAAW,CAAK,GAC5BH,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\nconst promisesForm = document.querySelector('.form');\npromisesForm.addEventListener('submit', onPromisesFormSubmit);\n\nfunction onPromisesFormSubmit(e) {\n  e.preventDefault();\n  const { amount, delay, step } = e.target.elements;\n  const submitButton = e.target.lastElementChild\n  let delayTime = Number(delay.value)\n  // Спосіб заборони зайвого кліку по формі під час виконання функції за допомогою відключення кнопки на час виконання функції\n  submitButton.disabled = true;\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, delayTime)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayTime += Number(step.value);\n  }\n\n  // Спосіб заборони зайвого кліку по формі під час виконання функції за допомогою очищення форми\n  // e.target.reset();\n\n  // Спосіб заборони зайвого кліку по формі під час виконання функції за допомогою відключення кнопки на час виконання функції\n  setTimeout(() => { \n    submitButton.disabled = false;\n  }, delayTime)\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","amount","delay1","step","target","elements","submitButton","lastElementChild","delayTime","Number","value","disabled","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.4af0e41f.js.map"}